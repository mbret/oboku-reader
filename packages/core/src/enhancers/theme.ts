import { BehaviorSubject, type Observable } from "rxjs"
import { takeUntil, tap } from "rxjs/operators"
import type { EnhancerOutput, RootEnhancer } from "./types/enhancer"
import { upsertCSSToFrame } from "../utils/frames"

const defaultThemes = [
  {
    name: `bright` as const,
    backgroundColor: `white`,
  },
  {
    name: `sepia` as const,
    backgroundColor: `#eaddc7`,
    foregroundColor: `black`,
  },
  {
    name: `night` as const,
    backgroundColor: `#191717`,
    foregroundColor: `#f1ebeb`,
  },
]

export type Theme = (typeof defaultThemes)[number][`name`] | `publisher`

export type ThemeEnhancer = <
  InheritOptions,
  InheritOutput extends EnhancerOutput<RootEnhancer>,
>(
  next: (options: InheritOptions) => InheritOutput,
) => (
  options: InheritOptions & {
    theme?: Theme
  },
) => InheritOutput & {
  theme: {
    set: (theme: Theme) => void
    get: () => Theme
    $: {
      theme$: Observable<Theme>
    }
  }
}

export const themeEnhancer: ThemeEnhancer = (next) => (options) => {
  const reader = next(options)
  const currentThemeSubject$ = new BehaviorSubject<Theme>(
    options.theme ?? `bright`,
  )

  const getStyle = () => {
    const foundTheme = defaultThemes.find(
      (entry) => entry.name === currentThemeSubject$.value,
    )

    return `
      body {
        ${foundTheme !== undefined ? `background-color: ${foundTheme.backgroundColor} !important;` : ``}
      }
      ${
        foundTheme?.foregroundColor
          ? `
          body * {
            ${
              /*
              Ideally, we would like to use !important but it could break publisher specific
              cases
            */ ``
            }
            color: ${foundTheme.foregroundColor};
          }
        `
          : ``
      }
    `
  }

  const applyChangeToSpineItemElement = ({
    container,
  }: {
    container: HTMLElement
  }) => {
    const foundTheme = defaultThemes.find(
      (entry) => entry.name === currentThemeSubject$.value,
    )
    if (foundTheme) {
      container.style.setProperty(
        `background-color`,
        foundTheme.backgroundColor,
      )
    }

    return () => {
      // __
    }
  }

  const applyChangeToSpineItem = () => {
    reader.spineItemsManager.items.forEach((item) => {
      const frame = item.renderer.getDocumentFrame()

      if (frame) {
        upsertCSSToFrame(frame, `prose-reader-theme`, getStyle())
      }

      applyChangeToSpineItemElement({ container: item.element })
    })
  }

  /**
   * Make sure to apply theme on item load
   */
  reader.hookManager.register(`item.onDocumentLoad`, ({ itemId }) => {
    const item = reader.spineItemsManager.get(itemId)

    /**
     * We don't apply the theme on pre-paginated items
     * because the theme is applied on the page level.
     *
     * A good example is the iframe generated by pdf for annotations.
     * It would mess up with the rendering.
     */
    if (item?.renditionLayout !== "pre-paginated") {
      const frame = item?.renderer.getDocumentFrame()

      if (frame) {
        upsertCSSToFrame(frame, `prose-reader-theme`, getStyle())
      }
    }
  })

  /**
   * Make sure to apply theme on item container (fixed layout)
   * & loading element
   */
  reader.spineItemsManager.items$
    .pipe(
      tap((items) =>
        items.map(({ element }) =>
          applyChangeToSpineItemElement({ container: element }),
        ),
      ),
      takeUntil(reader.$.destroy$),
    )
    .subscribe()

  currentThemeSubject$
    .pipe(
      tap(() => {
        applyChangeToSpineItem()
      }),
      takeUntil(reader.$.destroy$),
    )
    .subscribe()

  return {
    ...reader,
    theme: {
      set: (theme) => {
        if (theme !== currentThemeSubject$.value) {
          currentThemeSubject$.next(theme)
        }
      },
      get: () => currentThemeSubject$.value,
      $: {
        theme$: currentThemeSubject$.asObservable(),
      },
    },
  }
}
